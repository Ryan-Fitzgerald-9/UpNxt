"""
Django settings for upnxt_django project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@j6lio8z=*)%zae(b_7(@0x5*fj)u*9co-4#t!&*e66u7dtcf@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'upnxt',
    'rest_framework',
    'django.contrib.sites',
    'dj_rest_auth',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth.registration',  
    'rest_framework.authtoken',
    'corsheaders'
]

# REST_FRAMEWORK settings configure the behavior of the Django Rest Framework.
# It specifies the authentication classes to be used, and in this case, TokenAuthentication is enabled.
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    # ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    )
}

# AUTH_USER_MODEL is set to 'upnxt.CustomUser', which indicates the custom user model for authentication.
AUTH_USER_MODEL = 'upnxt.CustomUser'

# MIDDLEWARE defines a list of middleware classes that process requests and responses.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'upnxt.middleware.LogPostDataMiddleware',
]

ROOT_URLCONF = 'upnxt_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'django.template.context_processors.request' #from youtube clip
            ],
        },
    },
]

WSGI_APPLICATION = 'upnxt_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'upnxt',
        'USER': 'upnxtuser',
        'PASSWORD': 'upnxt',
        'HOST': 'localhost'
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOWED_ORIGINS = [
    'https://example.com',
    'https://sub.example.com',
    'http://localhost:5173',
    'http://127.0.0.1:5555'
]

CORS_ALLOW_ALL_ORIGINS = True

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:5173'
]

# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.ModelBackend', 
#     'allauth.account.auth_backends.AuthenticationBackend',
# ]

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'upnxt.serializers.CustomRegisterSerializer',
}

# # Configure AllAuth
SITE_ID = 1
# # For development only
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# # Disables email verification
ACCOUNT_EMAIL_VERIFICATION = 'none'
# # Users register with email
# ACCOUNT_AUTHENTICATION_METHOD = 'email'
# # Email is required during registration
# ACCOUNT_EMAIL_REQUIRED = True
# # Email addresses must be unique
# ACCOUNT_UNIQUE_EMAIL = True
# # Users create a new username during registration
# ACCOUNT_USERNAME_REQUIRED = True

# ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'
# # Log the user out immediately when requested
# ACCOUNT_LOGOUT_ON_GET = True